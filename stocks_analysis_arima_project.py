# -*- coding: utf-8 -*-
"""STOCKS_Analysis_ARIMA_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ssB4rzaYZjHSVEw7kr1PFreQCbsaF3w-
"""

# Commented out IPython magic to ensure Python compatibility.
#install yahoo finance package
# %pip install yfinance

#import data from yahoo finance
import yfinance as yf
df = yf.download('MSFT')

df

#import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

#plot current graph
plt.plot(df.index, df['Adj Close'])
plt.show()

#train test split

# 90% of data as training data
to_row = int(len(df)*0.9)

training_data = list(df[0:to_row]['Adj Close']) #beginning to 90% of data

# 10% as testing data
testing_data = list(df[to_row:]['Adj Close']) #from last 10% of the data at the end

#training set and testing set graph
plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot(df[0:to_row]['Adj Close'], 'green', label="Train data")
plt.plot(df[to_row:]['Adj Close'], 'blue', label="Test data")
plt.legend()

model_predictions = []
model_predictions_op = []
n_test_obser = len(testing_data)

#Augmented Dickey-Fuller Test
from statsmodels.tsa.stattools import adfuller

result = adfuller(df['Adj Close'])
print('ADF Statsictic: %f' % result[0])
print('p-value %f' % result[1]) #if < 0.05 then stationary
print('Critical Values:')
for key, value in result[4].items():
  print('\t%s: %.3f' % (key,value))

#finding p order of AR
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
data = pd.DataFrame(df['Adj Close'])

plot_pacf
x=plot_pacf(data.diff().dropna()) #p, 1st and 2nd lag comparison from limit

from matplotlib.colorbar import constrained_layout
#finding d
fig, (ax1, ax2, ax3) = plt.subplots(3, constrained_layout = True)
ax1.plot(data); ax1.set_title('Original Graph')
ax2.plot(data.diff()); ax2.set_title('1st Order Diff Graph')
ax3.plot(data.diff().diff()); ax3.set_title('2nd Order Diff Graph')
plt.show()

#find value of d number of differencing for stationarity
fig, (ax1, ax2, ax3) = plt.subplots(3, constrained_layout = True)
x=plot_acf(data, ax = ax1)
y=plot_acf(data.diff().dropna(), ax = ax2)
z=plot_acf(data.diff().diff().dropna(), ax = ax3)
#check difference between 1st and 2nd order diff(),
# if 2nd immediate on 2nd order goes negative, then it's an over difference

#q finding differential order of Moving Average 
x=plot_acf(data.dropna())
y=plot_acf(data.diff().dropna()) #q = # of lags out of limit

#ARIMA Training

for i in range(n_test_obser):
  model = ARIMA(training_data, order = (1,1,4)) #p,d,q
  model_fit = model.fit()
  output = model_fit.forecast()
  yhat = list(output[0])[0] #prediction of first value
  model_predictions.append(yhat)
  actual_test_value = testing_data[i] #actual data
  training_data.append(actual_test_value) #update training data
  #break

#summary

print(model_fit.summary())

plt.figure(figsize=(15,9))
plt.grid(True)

date_range = df[to_row:].index

plt.plot(date_range, model_predictions, color='blue', linestyle='dashed', label='MSFT predicted Price')
plt.plot(date_range, testing_data, color='red', label='MSFT Actual Price', alpha=0.5)
plt.plot(df[0:to_row]['Adj Close'], color='red', alpha=0.5)
plt.fill_between(date_range, df[to_row:]['Adj Close'], model_predictions, color='k', alpha=.5, label='Error')

plt.title('MSFT Price Prediction')
plt.xlabel("Date")
plt.ylabel('Price')
plt.legend()
plt.show()

plt.figure(figsize=(15,9))
plt.grid(True)

date_range = df[to_row:].index

plt.plot(date_range, model_predictions, color='blue', linestyle='dashed', label='MSFT predicted Price')
plt.plot(date_range, testing_data, color='red', label='MSFT Actual Price')
plt.fill_between(date_range, df[to_row:]['Adj Close'], model_predictions, color='k', alpha=0.5, label='Error')

plt.title('MSFT Price Prediction')
plt.xlabel("Date")
plt.ylabel('Price')
plt.legend()
plt.show()

len(date_range)
#print(to_row)
#len(df['Adj Close'])

plt.figure(figsize=(15,9))
plt.grid(True)

date_range = df[to_row:].index

plt.plot(date_range[850:], model_predictions[850:], color='blue', linestyle='dashed', label='MSFT predicted Price')
plt.plot(date_range[850:], testing_data[850:], color='red', label='MSFT Actual Price')
plt.fill_between(date_range[850:], df[to_row+850:]['Adj Close'], model_predictions[850:], color='k', alpha=0.5, label='Error')

plt.title('MSFT Price Prediction')
plt.xlabel("Date")
plt.ylabel('Price')
plt.legend()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, constrained_layout = True, figsize=(15,9))

ax1.plot(date_range, model_predictions, color='blue')
ax1.set_title('MSFT predicted Price')
#ax1.plot(date_range[925], model_predictions[925], color='red', marker = 'o')
ax2.plot(date_range, testing_data, color='red')
ax2.set_title('MSFT Actual Price')

plt.xlabel("Date")
plt.ylabel('Price')
plt.show()

fig, (ax1, ax2) = plt.subplots(2, constrained_layout = True, figsize=(15,9))

ax1.plot(date_range, model_predictions, color='blue')
ax1.set_title('MSFT predicted Price')
ax1.fill_between(date_range[850:], model_predictions[850:], color='k', alpha=0.15, label='Area of Interest')
ax2.plot(date_range, testing_data, color='red')
ax2.fill_between(date_range[850:], model_predictions[850:], color='k', alpha=0.15, label='Area of Interest')
ax2.set_title('MSFT Actual Price')

plt.xlabel("Date")
plt.ylabel('Price')
ax1.legend()
ax2.legend()
plt.show()

#performance

#mean absolute precentage error
mape = np.mean(np.abs(np.array(model_predictions) - np.array(testing_data))/np.abs(testing_data))
print('MAPE: '+str(mape))